<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>github+hexo部署个人博客踩坑记</title>
    <link href="/2020/07/15/github+hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <url>/2020/07/15/github+hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-git"><a href="#1-git" class="headerlink" title="1.  git"></a>1.  git</h2><ol><li><p>安装</p><ul><li><p><code>yum update &amp;&amp; yum install git -y</code></p></li><li><p>安装完成后进行验证</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200714154845.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>如果这里使用的是阿里云的服务器的话是自带有git的，完全不用安装。</p></li></ul></li><li><p>配置</p><pre><code class="hljs shell">git config --global user.name "name"# 这里的name填的是githhub的用户名git config --global user.email "emali" # emalie则是github的邮件git config user.name# 输出绑定的用户git config user.email# 输出绑定的邮箱<span class="hljs-meta">#</span><span class="bash"> 生成免密key</span>ssh-keygen -t rsa -C "emali"<span class="hljs-meta">#</span><span class="bash"> emali 指的是上面的github邮件，这一步主要是生成ssh密钥，后续将博客同步到github时用的</span></code></pre><ul><li><p>验证</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200714195255.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>最后面的生成ssh密钥已经生成过了，就不再次生成了。</p></li></ul></li></ol><h2 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h2><pre><code class="hljs shell">yum update gcc -y# 安装gcc后续用来编译安装node.jsyum install gcc+ gcc-c++ -ywget https://npm.taobao.org/mirrors/node/v10.13.0/node-v10.13.0.tar.gz# 下载node.js的安装文件tar xvf node-v10.13.0.tar.gzcd node-v10.13.0/./configure# 生成文件make# 编译这一步超级久，看服务器配置吧，反正我编译了一个钟make install# 安装</code></pre><ul><li>上面的操作都已经装过了,且不方便再重复一次,这里不贴图了。</li></ul><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><pre><code class="hljs shell">cd /root &amp;&amp; mkdir hexo# 切换到root目录下生成hexo文件npm config set registry https://registry.npm.taobao.org# 将npm源更换为淘宝的,如果不更换,默认源下载慢到怀疑人生.cd hexonpm install -g hexo-cli #安装hexohexo init myblog # hexo 生成myblog文件夹在其中进行初始化npm installhexo g# 生成静态文件</code></pre><ul><li>访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到生成的博客了。</li><li>设置主题</li><li>hexo 官网上提供了三百多款主题，想要哪个可以自己选择：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> (没有科学上网的话访问较慢)</li></ul><pre><code class="hljs shell">git clone 主题链接tar -xvf 主题压缩包<span class="hljs-meta">#</span><span class="bash"> 解压之后会有一个主题名</span>vim /root/hexo/myblog/_config.yml在theme：后换上解压出来的主题名就算是应用主题了。hexo clean# 清除静态文件hexo g# 生成新主题的静态文件</code></pre><ul><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200714201954.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li></ul><h2 id="4-安装宝塔-Nginx"><a href="#4-安装宝塔-Nginx" class="headerlink" title="4. 安装宝塔+Nginx"></a>4. 安装宝塔+Nginx</h2><ul><li>安装宝塔</li></ul><pre><code class="hljs shell">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code></pre><ul><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715093804.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>安装配置Nginx</p></li><li><p>在软件商店搜索nginx，那个免费的就是了。因为安装过了，显示的是卸载。</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200714205444.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>下载之后点击右侧的设置，修改配置。</p></li><li><p>第一行改成 <code>user root www</code> 这里的用户不是root的话可能没有权限</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715082056.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>第六十五行改成也就是nginx网站根目录<code>root  /root/hexo/myblog/public;</code></p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715113613.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>再返回nginx管理，将nginx进行重启。</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715082627.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>到这一步就已经配置好网站了，可以使用ip或域名的形式访问前面部署好的hexo了。</p></li></ul><h2 id="5-部署到github"><a href="#5-部署到github" class="headerlink" title="5. 部署到github"></a>5. 部署到github</h2><ul><li><p>新建仓库，访问github.com 在首页点击创建仓库。<strong>（！！！仓库名前缀一定要和用户名一致，不然会连接不上）</strong></p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715083252.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>接下来就是修改hexo的配置文件，配置好github链接</p></li><li><p><code>vim /root/hexo/myblog/_config.yml</code></p></li></ul><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将光标下滑至文件的末尾</span>deploy:  type: git  repository:    github: git@github.com:xiaoming/xiaoming.github.io.git# 这里的xiaoming改成自己的仓库名  branch: master</code></pre><ul><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715084018.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>安装同步到github的插件<code>npm install hexo-deployer-git --save</code></p></li><li><p>查看前面生成的ssh密钥<code>cat /root/.ssh/id_rsa.pub</code>将其复制</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715084946.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>返回github点击右上角的头像，然后settting，再ssh key and gpg keys 添加新的ssh密钥</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715085421.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li><li><p>返回服务器，在终端输入 <code>ssh -T git@github.com</code> 验证连接。提示这个显示连接成功。</p></li><li><table><thead><tr><th><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200715114702.png" srcset="/img/loading.gif" alt=""></th></tr></thead><tbody><tr><td></td></tr></tbody></table></li></ul><h2 id="6-发布文章"><a href="#6-发布文章" class="headerlink" title="6. 发布文章"></a>6. 发布文章</h2><pre><code class="hljs shell">cd /root/hexo/myblog# 切换到hexo环境下hexo new hello-world# 生成名为hello-world的文章hexo clean# 清除静态文件hexo g# 生成静态文件hexo d# 同步到github</code></pre><ul><li>几分钟后访问xiaoming.github.io就可以看到自己的发布的文章了。(这里的xiaoming为自己的用户名)</li></ul><h2 id="7-踩坑总结"><a href="#7-踩坑总结" class="headerlink" title="7. 踩坑总结"></a>7. 踩坑总结</h2><ul><li>默认的是next的主题，很简洁，如果要个性化的话，可以去hexo访问的主题商店，很多主题都会有文档的，有的写的很详细，有的一笔带过。这里不推荐第一次接触就去弄那种很复杂的主题，因为会怀疑人生了。(我就是折腾了大几天，自闭了都)</li><li>还有发布文章要内嵌图片的话，需要用markdown格式的链接。有个大坑需要注意，白嫖gitee的仓库做图床的话，访问着没有登录gitee账号是无法加载图片的。本博客用的是阿里云oss+picgo做的图床。(阿里云oss如何部署图床自行百度，这里不写出来了。)</li><li>hexo常用命令缩写</li></ul><pre><code class="hljs shell">hexo g # 完整命令为hexo generate,用于生成静态文件hexo s # 完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d # 完整命令为hexo deploy,用于将本地文件发布到github上hexo n # 完整命令为hexo new,用于新建一篇文章------ 分割线 -------hexo new “postName” # 新建文章hexo new page “pageName” # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问端口（默认端口4000，“ctrl + c”关闭server）hexo deploy # 部署到GitHubhexo help # 查看帮助hexo version # 查看Hexo的版本hexo s -g # 生成并本地预览hexo d -g # 生成并上传</code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2020/07/14/hello-world/"/>
    <url>/2020/07/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hello world<br>hello world<br>hello world</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
